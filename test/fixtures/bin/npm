#!/usr/bin/env node
"use strict";

/**
 *
 * This is a mock of the `npm` CLI, for testing purposes.
 * It just records the CLI arguments in a JSON file.
 *
 */

const npm = require("../../utils/npm");

try {
  // Get the args that NPM was called with
  let argv = process.argv.slice(2);

  // Get the stub behavior that we should implement
  let stub = npm.stub();

  if (!stub) {
    throw new Error(
      "NPM was called when not expected:\n" +
      "EXPECTED: <not to be called>\n" +
      `ACTUAL:   npm ${argv.join(" ")}\n`
    );
  }

  // Ensure that we're running in the correct directory
  if (process.cwd() !== stub.cwd) {
    throw new Error(
      "NPM was called with the wrong working directory:\n" +
      `EXPECTED: ${stub.cwd}\n` +
      `ACTUAL:   ${process.cwd()}\n`
    );
  }

  // Ensure that the input args match
  for (let i = 0; i < Math.max(argv.length, stub.args.length); i++) {
    if (argv[i] !== stub.args[i]) {
      throw new Error(
        "NPM was called with incorrect arguments:\n" +
        `EXPECTED: npm ${stub.args.join(" ")}\n` +
        `ACTUAL:   npm ${argv.join(" ")}\n`
      );
    }
  }

  // Ensure that the environment variables match
  for (let key of Object.keys(stub.env)) {
    if (process.env[key] !== stub.env[key]) {
      throw new Error(
        "NPM was called with incorrect environment variables:\n" +
        `EXPECTED: ${key} = ${stub.env[key]}\n` +
        `ACTUAL:   ${key} = ${process.env[key]}\n`
      );
    }
  }

  // Print the stub output
  if (stub.stdout) {
    process.stdout.write(stub.stdout);
  }

  if (stub.stderr) {
    process.stderr.write(stub.stderr);
  }

  // Return the stub exit code
  process.exit(stub.exitCode);
}
catch (error) {
  console.error(error.message);
  process.exit(1);
}
